Description: *Config files for cmake.
 Upstream provides a FindCapnProto.cmake, but this needs to be installed in a
 version-specific directory. In this patch we generate CapnProtoConfig.cmake
 and CapnProtoConfigVersion.cmake so that we don't need to move our Find*
 files around any time the cmake package is upgraded.
Author: Tom Lee <debian@tomlee.co>
Last-Update: 2015-05-09
---
This patch header follows DEP-3: http://dep.debian.net/deps/dep3/
--- a/Makefile.am
+++ b/Makefile.am
@@ -59,12 +59,18 @@
   src/capnp/testdata/packed                                                  \
   src/capnp/testdata/pretty.txt                                              \
   CMakeLists.txt                                                             \
-  cmake/FindCapnProto.cmake                                                  \
+  cmake/CapnProtoConfig.cmake                                                \
+  cmake/CapnProtoConfigVersion.cmake                                         \
   src/CMakeLists.txt                                                         \
   src/kj/CMakeLists.txt                                                      \
   src/capnp/CMakeLists.txt
 
-CLEANFILES = $(test_capnpc_outputs) test_capnpc_middleman distcheck-cmake
+CLEANFILES = \
+	$(test_capnpc_outputs) \
+	test_capnpc_middleman \
+	distcheck-cmake \
+	cmake/CapnProtoConfig.cmake \
+	cmake/CapnProtoConfigVersion.cmake
 
 # Deletes all the files generated by autoreconf.
 MAINTAINERCLEANFILES =   \
@@ -136,6 +142,21 @@
 pkgconfigdir = $(libdir)/pkgconfig
 pkgconfig_DATA = capnp.pc capnp-rpc.pc
 
+cmakeconfigdir = $(libdir)/cmake/CapnProto
+cmakeconfig_DATA = cmake/CapnProtoConfig.cmake cmake/CapnProtoConfigVersion.cmake
+
+cmake/CapnProtoConfig.cmake: cmake/CapnProtoConfig.cmake.in
+	sed -e "s,@CAPNP_INCLUDE_DIR@,$(includedir),g" \
+		-e "s,@CAPNP_LIB_DIR@,$(libdir),g" \
+		-e "s,@CAPNP_BIN_DIR@,$(bindir),g" \
+		$< >$@
+
+cmake/CapnProtoConfigVersion.cmake: cmake/CapnProtoConfigVersion.cmake.in
+	sed -e "s,@CAPNP_INCLUDE_DIR@,$(includedir),g" \
+		-e "s,@CAPNP_LIB_DIR@,$(libdir),g" \
+		-e "s,@CAPNP_BIN_DIR@,$(bindir),g" \
+		$< >$@
+
 noinst_HEADERS = \
   src/kj/miniposix.h
 
--- /dev/null
+++ b/cmake/CapnProtoConfig.cmake.in
@@ -0,0 +1,107 @@
+find_path(CAPNP_INCLUDE_DIRS capnp/generated-header-support.h HINTS "@CAPNP_INCLUDE_DIR@")
+find_library(CAPNP_LIB_KJ NAMES kj HINTS "@CAPNP_LIB_DIR@")
+find_library(CAPNP_LIB_KJ-ASYNC NAMES kj-async HINTS "@CAPNP_LIB_DIR@")
+find_library(CAPNP_LIB_CAPNP NAMES capnp HINTS "@CAPNP_LIB_DIR@")
+find_library(CAPNP_LIB_CAPNP-RPC NAMES capnp-rpc "@CAPNP_LIB_DIR@")
+mark_as_advanced(CAPNP_LIB_KJ CAPNP_LIB_KJ-ASYNC CAPNP_LIB_CAPNP CAPNP_LIB_CAPNP-RPC)
+
+set(CAPNP_LIBRARIES_LITE
+    ${CAPNP_LIB_KJ}
+    ${CAPNP_LIB_CAPNP})
+
+set(CAPNP_LIBRARIES
+    ${CAPNP_LIBRARIES_LITE}
+    ${CAPNP_LIB_KJ-ASYNC}
+    ${CAPNP_LIB_CAPNP-RPC})
+
+find_program(CAPNP_EXECUTABLE
+    NAMES capnp
+    DOC "Cap'n Proto Command-line Tool"
+    HINTS "@CAPNP_BIN_DIR@")
+
+find_program(CAPNPC_CXX_EXECUTABLE
+    NAMES capnpc-c++
+    DOC "Cap'n Proto C++ Compiler"
+    HINTS "@CAPNP_BIN_DIR@")
+
+function(CAPNP_GENERATE_CPP SOURCES HEADERS)
+  if(NOT ARGN)
+    message(SEND_ERROR "CAPNP_GENERATE_CPP() called without any source files.")
+  endif()
+  if(NOT CAPNP_EXECUTABLE)
+    message(SEND_ERROR "Could not locate capnp executable (CAPNP_EXECUTABLE).")
+  endif()
+  if(NOT CAPNPC_CXX_EXECUTABLE)
+    message(SEND_ERROR "Could not locate capnpc-c++ executable (CAPNPC_CXX_EXECUTABLE).")
+  endif()
+  if(NOT CAPNP_INCLUDE_DIRS)
+    message(SEND_ERROR "Could not locate capnp header files (CAPNP_INCLUDE_DIRS).")
+  endif()
+
+  # Default compiler includes
+  set(include_path -I ${CMAKE_CURRENT_SOURCE_DIR} -I ${CAPNP_INCLUDE_DIRS})
+
+  if(DEFINED CAPNPC_IMPORT_DIRS)
+    # Append each directory as a series of '-I' flags in ${include_path}
+    foreach(directory ${CAPNPC_IMPORT_DIRS})
+      get_filename_component(absolute_path "${directory}" ABSOLUTE)
+      list(APPEND include_path -I ${absolute_path})
+    endforeach()
+  endif()
+
+  if(DEFINED CAPNPC_OUTPUT_DIR)
+    # Prepend a ':' to get the format for the '-o' flag right
+    set(output_dir ":${CAPNPC_OUTPUT_DIR}")
+  else()
+    set(output_dir ":.")
+  endif()
+
+  if(NOT DEFINED CAPNPC_SRC_PREFIX)
+    set(CAPNPC_SRC_PREFIX "${CMAKE_CURRENT_SOURCE_DIR}")
+  endif()
+  get_filename_component(CAPNPC_SRC_PREFIX "${CAPNPC_SRC_PREFIX}" ABSOLUTE)
+
+  set(${SOURCES})
+  set(${HEADERS})
+  foreach(schema_file ${ARGN})
+    get_filename_component(file_path "${schema_file}" ABSOLUTE)
+    get_filename_component(file_dir "${file_path}" PATH)
+
+    # Figure out where the output files will go
+    if (NOT DEFINED CAPNPC_OUTPUT_DIR)
+      set(output_base "${file_path}")
+    else()
+      # Output files are placed in CAPNPC_OUTPUT_DIR, at a location as if they were
+      # relative to CAPNPC_SRC_PREFIX.
+      string(LENGTH "${CAPNPC_SRC_PREFIX}" prefix_len)
+      string(SUBSTRING "${file_path}" 0 ${prefix_len} output_prefix)
+      if(NOT "${CAPNPC_SRC_PREFIX}" STREQUAL "${output_prefix}")
+        message(SEND_ERROR "Could not determine output path for '${schema_file}' ('${file_path}') with source prefix '${CAPNPC_SRC_PREFIX}' into '${CAPNPC_OUTPUT_DIR}'.")
+      endif()
+
+      string(SUBSTRING "${file_path}" ${prefix_len} -1 output_path)
+      set(output_base "${CAPNPC_OUTPUT_DIR}${output_path}")
+    endif()
+
+    add_custom_command(
+      OUTPUT "${output_base}.c++" "${output_base}.h"
+      COMMAND "${CAPNP_EXECUTABLE}"
+      ARGS compile
+          -o ${CAPNPC_CXX_EXECUTABLE}${output_dir}
+          --src-prefix ${CAPNPC_SRC_PREFIX}
+          ${include_path}
+          ${CAPNPC_FLAGS}
+          ${file_path}
+      DEPENDS "${schema_file}"
+      COMMENT "Compiling Cap'n Proto schema ${schema_file}"
+      VERBATIM
+    )
+    list(APPEND ${SOURCES} "${output_base}.c++")
+    list(APPEND ${HEADERS} "${output_base}.h")
+  endforeach()
+
+  set_source_files_properties(${${SOURCES}} ${${HEADERS}} PROPERTIES GENERATED TRUE)
+  set(${SOURCES} ${${SOURCES}} PARENT_SCOPE)
+  set(${HEADERS} ${${HEADERS}} PARENT_SCOPE)
+endfunction()
+
--- /dev/null
+++ b/cmake/CapnProtoConfigVersion.cmake.in
@@ -0,0 +1,11 @@
+set(PACKAGE_VERSION "@CAPNP_VERSION@")
+
+if("${PACKAGE_VERSION}" VERSION_LESS "${PACKAGE_FIND_VERSION}")
+    set(PACKAGE_VERSION_COMPATIBLE FALSE)
+else()
+    set(PACKAGE_VERSION_COMPATIBLE TRUE)
+    if ("${PACKAGE_VERSION}" VERSION_EQUAL "${PACKAGE_FIND_VERSION}")
+        set(PACKAGE_VERSION_EXACT TRUE)
+    endif()
+endif()
+
