Description: Fix build error on hurd-i386.
  hurd-i386 does not define IOV_MAX. Here we provide a more robust way to
  determine the max iovs allowed during readv/writev operations.
Author: Tom Lee <debian@tomlee.co>
Forwarded: https://github.com/sandstorm-io/capnproto/pull/202
Last-Update: 2015-05-09
---
This patch header follows DEP-3: http://dep.debian.net/deps/dep3/
--- a/Makefile.am
+++ b/Makefile.am
@@ -136,6 +136,9 @@
 pkgconfigdir = $(libdir)/pkgconfig
 pkgconfig_DATA = capnp.pc capnp-rpc.pc
 
+noinst_HEADERS = \
+  src/kj/miniposix.h
+
 includekj_HEADERS =                                            \
   src/kj/common.h                                              \
   src/kj/units.h                                               \
@@ -148,7 +151,6 @@
   src/kj/exception.h                                           \
   src/kj/debug.h                                               \
   src/kj/arena.h                                               \
-  src/kj/miniposix.h                                           \
   src/kj/io.h                                                  \
   src/kj/tuple.h                                               \
   src/kj/one-of.h                                              \
--- a/src/kj/io.c++
+++ b/src/kj/io.c++
@@ -24,7 +24,6 @@
 #include "miniposix.h"
 #include <algorithm>
 #include <errno.h>
-#include <limits.h>
 
 #if !_WIN32
 #include <sys/uio.h>
@@ -290,15 +289,10 @@
   }
 
 #else
-  // Apparently, there is a maximum number of iovecs allowed per call.  I don't understand why.
-  // Also, most platforms define IOV_MAX but Linux defines only UIO_MAXIOV.  Unfortunately, Solaris
-  // defines a constant UIO_MAXIOV with a different meaning, so we check for IOV_MAX first.
-#if !defined(IOV_MAX) && defined(UIO_MAXIOV)
-#define IOV_MAX UIO_MAXIOV
-#endif
-  while (pieces.size() > IOV_MAX) {
-    write(pieces.slice(0, IOV_MAX));
-    pieces = pieces.slice(IOV_MAX, pieces.size());
+  const size_t iovmax = miniposix::iovMax(pieces.size());
+  while (pieces.size() > iovmax) {
+    write(pieces.slice(0, iovmax));
+    pieces = pieces.slice(iovmax, pieces.size());
   }
 
   KJ_STACK_ARRAY(struct iovec, iov, pieces.size(), 16, 128);
--- a/src/kj/async-io.c++
+++ b/src/kj/async-io.c++
@@ -24,6 +24,7 @@
 #include "debug.h"
 #include "thread.h"
 #include "io.h"
+#include "miniposix.h"
 #include <unistd.h>
 #include <sys/uio.h>
 #include <errno.h>
@@ -269,14 +270,18 @@
 
   Promise<void> writeInternal(ArrayPtr<const byte> firstPiece,
                               ArrayPtr<const ArrayPtr<const byte>> morePieces) {
-    KJ_STACK_ARRAY(struct iovec, iov, 1 + morePieces.size(), 16, 128);
+    const size_t iovmax = kj::miniposix::iovMax(1 + morePieces.size());
+    KJ_STACK_ARRAY(struct iovec, iov, kj::min(1 + morePieces.size(), iovmax), 16, 128);
+    size_t iovTotal = 0;
 
     // writev() interface is not const-correct.  :(
     iov[0].iov_base = const_cast<byte*>(firstPiece.begin());
     iov[0].iov_len = firstPiece.size();
-    for (uint i = 0; i < morePieces.size(); i++) {
-      iov[i + 1].iov_base = const_cast<byte*>(morePieces[i].begin());
-      iov[i + 1].iov_len = morePieces[i].size();
+    iovTotal += iov[0].iov_len;
+    for (uint i = 1; i < iov.size(); i++) {
+      iov[i].iov_base = const_cast<byte*>(morePieces[i - 1].begin());
+      iov[i].iov_len = morePieces[i - 1].size();
+      iovTotal += iov[i].iov_len;
     }
 
     ssize_t writeResult;
@@ -302,6 +307,13 @@
       if (n < firstPiece.size()) {
         // Only part of the first piece was consumed.  Wait for buffer space and then write again.
         firstPiece = firstPiece.slice(n, firstPiece.size());
+        iovTotal -= n;
+
+        if (iovTotal == 0) {
+            // Oops, what actually happened is that we hit the IOV_MAX limit. Don't wait.
+            return writeInternal(firstPiece, morePieces);
+        }
+
         return observer.whenBecomesWritable().then([=]() {
           return writeInternal(firstPiece, morePieces);
         });
@@ -312,6 +324,7 @@
       } else {
         // First piece was fully consumed, so move on to the next piece.
         n -= firstPiece.size();
+        iovTotal -= firstPiece.size();
         firstPiece = morePieces[0];
         morePieces = morePieces.slice(1, morePieces.size());
       }
--- a/src/kj/miniposix.h
+++ b/src/kj/miniposix.h
@@ -32,6 +32,9 @@
 #if _WIN32
 #include <io.h>
 #include <direct.h>
+#else
+#include <limits.h>
+#include <errno.h>
 #endif
 
 #if !_WIN32 || __MINGW32__
@@ -94,6 +97,38 @@
 using ::pipe;
 using ::mkdir;
 
+inline size_t iovMax(size_t count)
+{
+  // Apparently, there is a maximum number of iovecs allowed per call.  I don't understand why.
+  // Most platforms define IOV_MAX but Linux defines only UIO_MAXIOV and others, like Hurd,
+  // define neither.
+  //
+  // On platforms where both IOV_MAX and UIO_MAXIOV are undefined, we poke sysconf(_SC_IOV_MAX),
+  // try to fall back to the POSIX-mandated minimum of _XOPEN_IOV_MAX if that fails.
+  //
+  // http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/limits.h.html#tag_13_23_03_01
+#if defined(IOV_MAX)
+  // Solaris (and others?)
+  return IOV_MAX;
+#elif defined(UIO_MAXIOV)
+  // Linux
+  return UIO_MAXIOV;
+#else
+  // POSIX mystery meat
+
+  long iovmax;
+
+  errno = 0;
+  if ((iovmax = sysconf(_SC_IOV_MAX)) == -1) {
+      // assume iovmax == -1 && errno == 0 means "unbounded"
+      return errno ? _XOPEN_IOV_MAX : count;
+  }
+  else {
+      return (size_t) iovmax;
+  }
+#endif
+}
+
 #endif
 
 }  // namespace miniposix
